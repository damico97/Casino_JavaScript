Joe Damico Work Log for JavaScript Casino Project

Dec 26, 2018:
	- Started research for working in JavaScript, and using HTML for views
	- Watched a few tutorials for working in this envorinment
	(1 Hour 30 Minutes)

	- Ported the Card Class into JavaScript
	(45 Minutes)

	- Created the initial view for the game, basing it off the tutorial that I watched 
	on YouTube
	(1 Hour)
TOTAL: 3.25 Hours


Dec 27, 2018:
	- Ported the Deck Class into JavaScript, and did the documentation of for the class
	(45 Minutes)

	- Created the Deck View, also having to learn how to create a scrollable view
	(30 Minutes)
TOTAL: 1.25 Hours


Dec 28, 2018:
	- Created a Basic view to show both player's hands, using image views that are hardcoded.
	This was mostly done to prove that the game was working when dealing cards to both players.
	(45 Minutes)
TOTAL: 45 Minutes


Dec 29, 2018:
	- Added the ability to click on the cards to select them and highlight the background to show
	that the cards have been selected.
	(45 Minutes)
TOTAL: 45 Minutes


Jan 1, 2019:
	- Added the table view, having to create my own view handler, similar to a Recycler View in Android
	so I can have any number of cards but also have an index assosiated with each card so we can understand
	which card the user has clicked on.
	(2 Hours)

	- Added the ability for the user to trail a card from it's hand
	(30 Minutes)

	- Created a custom scroll bar for the entire html page so that if the program is ran on a windows maching, 
	the scroll bar doesn't look like it's from Windows 95
	(15 Minutes)

	- Changed the human's hand view to use the custom indexed view adapter that I created for the Table so we don't
	have to use the hardcoded image views for the human's hand. At this time I left the computers hand with the hardcoded
	views because we do not have to click on anything their. It's just for show.
	(45 Mintues)
TOTAL: 3.5 Hours


Jan 4, 2019:
	- The user can now capture cards, had to work out a bunch of bugs, which required me to learn how passing objects works
	in JavaScript.
	(2 Hours 15 Minutes)

	- Created the view for the human's pile
	(30 Minutes)

	- Extended the player's class to handel the pile and making a capture move.
	(15 Minutes)
TOTAL: 3 Hours


Jan 5, 2019:
	- Started testing how to have multiple view pages in the HTML File so we can have multiple views throughout the game
	without loosing all the game data
	(30 Minutes)
TOTAL: 30 Minutes


Jan 6, 2019:
	- Finished the new page view for the console log so we can see everything that happens in the game in text form, similar
	to how you would view the game back in the C++ version.
	(30 Minutes)

	- Now everything the program updates the HTML views for the game board it also writes the board in text form into the consoleLog 
	class so when the user wants to see the console, you can see every status change in the game.
	(30 Minutes)

	- Trouble shot some bugs that arrised, all were fixed.
	(30 Minutes)
TOTAL: 1.5 Hours


Jan 7, 2019:
	- User capturing now records the move in the consoleLog
	(15 Minutes)

	- User trailing now records the move in the consoleLog
	(5 Minutes)

	- Started the creation of a Tournament class to move most of the functions out of the main Casino.js file and into another class 
	to have a much cleaner looking code.
	(10 Minutes)

	- Moved the marjority of the functions out of Casino.js and into the Tournament class and had to check if all the functionallity
	was still working.
	(45 Minutes)
TOTAL: 1.25 Hours


Jan 9, 2019:
	- Did some research on how to create inheritance in JavaScript
	(30 Minutes)
TOTAL: 0.5 Hours


Jan 10, 2019:
	- Started the creation of the Computer Class.
	(15 Minutes)

	- Started writing the findNextMove() function that will modifiy the Move Class (SuggestedMove Class changed later on) to setup
	how any player should play in the next move. As of know the the function can trail the lowest card, capture matching cards and
	can capture loose sets too, with matching cards at the same time.
	(45 Minutes)
TOTAL: 1 Hours


Jan 11, 2019:
	- Created the SuggestedMove class, which is similar to the Move class, but only takes in Abbrervations of the cards to play, so 
	it doesn't set the move, in case the human player doesn't want to follow the advice of the computer. Changed the findNextMove() 
	to use Abbrervations and the SuggestedMove Class instead of the cards themself.
	(45 Minutes)

	- Made the "Computer Move" button to use the logic to create the move, using the new executeMove() Function to convert the 
	abbrervations to find the actual cards to set the move class and execute which ever move the computer chose.
	(30 Minutes)

	- The computer logic can now capture sets of 3 cards whos values add up to the value of ones of it's hand cards.
	(15 Minutes)

	- Documentation on the Card and Deck Classes
	(15 Minutes)

	- The computer now records it move choice in the consoleLog for the record keeping of the game
	(15 Minutes)

	- Created the view for the coin toss page, this was done totally in HTML and CSS so it took a bit
	(1 Hour)
	
	- Started the logic for the coin toss, with the setting functions the the main function to run the toss
	(30 Minutes)

	- Players now alternate, and the user cannot select cards when it is the computers turn 
	(30 Minutes)
TOTAL: 4 Hours


Jan 12, 2019:
	- Game Board now promps the user to who makes the next move
	(15 Minutes)

	- Finshed coin toss functionallity, all is needed is the GUI to show who one the toss. But currently the winner 
	of the toss has the first move of the game.
	(15 Minutes)

	- Finished all coin toss GUI, and functionallity, still will need to change how the game is initalized to allow 
	for serialzation later one.
	(45 Minutes)

	- Created the Round Class and moved the card dealing functions and a few other to this class since they
	should be part of the round not the tournament.
	(30 Minutes)

	- Troubled shooted some bugs with the coin toss
	(15 Minutes)
TOTAL: 1.75 Hours


Jan 17, 2019:
	- Added the recordPlayerScores() function to record the players scores when the round is compeleted. There were some 
	issues with the function that were debuged, and as of now the scores are displayed in the JavaScript console.
	(2 Hours)

	- Started GUI for the End of Round
	(45 Minutes)
TOTAL: 2.75 Hours 


Jan 21, 2019:
	- Finished the GUI for the End of the Round, and the scores are recorded correctly and 
	and displayed on in the GUI, the scores have been debugged and doubled checked, and 
	everything seems to be working correctly.
	(2 Hours)
TOTAL: 2 Hours


Jan 23, 2019: 
	- Started created a custom HTML element to display the builds that are on the table. This 
	took a long time, as creating the custom layouts are much much more difficult than compared
	to doing the same thing in the Android envorinment.
	(2 Hours)

	- Started the Build class, now that their is something to represent the builds on the table.
	The Build class can only do basic things at the moment as the class is being developed.
	(45 Minutes)

	- Created the checkPossibleBuild() function in the Move class that checks if the cards the user 
	has selected are able to be used to make a build.
	(15 Minutes)

	- Debugging of the functions used to create the build took a very look time, because the error 
	caused the debugger to crash. 
	(1 Hour 15 Minutes)

	- Creating the ability to add the new custom items to the board to show the builds that are on 
	the table.
	(45 Minutes)
	
	- The build view can now show if the build is a multi-build or not and who owns the build by 
	changing the background color of the icon.
	(30 Minutes)

	- Started trying to get the build icon to change color when the build is selected, so far 
	nothing has changed.
	(30 Minutes)
TOTAL: 6 Hours


Jan 24, 2019:
	- Figured out the build highlighting, dugging it making sure it works for when their are 
	mutiple different builds on the table. At this time the build is not added to the move class, 
	so you cannot do anything with the builds yet.
	(45 Minutes)

	- Extended the Move class to handle the builds that are going to be selected from the table
	(30 Minutes)

	- Changed the checkPossibleCapture in the Move Class to check if the builds that were selected 
	are able to be captured with the hand card that is being played
	(5 Minutes)

	- Debugging for the use of the builds in the gaming, some issues were found and corrected
	(25 Minutes)

	- Taught the computer to create simple builds, will need to extend the class so the builds
	can contain more cards
	(30 Minutes)

	- Getting the computer to capture the build it made on the table, and the debugging of the 
	functions to get it working
	(30 Minutes)

	- Start checking if a card to be used in a build is already the capture card for another build
	(5 Minutes)

	- Continued Build Debugging and testing
	(10 Minutes)
TOTAL: 3.5 Hours


Jan 28, 2019:
	- Changed the findNextMove() function so it can find a build using upto 3 cards from the table, 
	where as it used to only use 1 card from the table
	(15 Minutes)

	- Multi-Build Debugging
	(30 Minutes)
TOTAL: 45 Minutes


Jan 31, 2019:
	- Multi-Build Debugging, trying to fix all the issues with the computer making multi builds and using 
	a card that was already the capture card for another one of it's builds. I think I finally fixed everything 
	by the time I was done here.
	(2 Hour 30 Minutes)

	- Documentation on the Player Class
	(1 Hour 30 Minutes)

	- Made the Multi tag in the build views functional, now that multi-builds are functional in the game
	(15 Minutes)

	- Added to the ConsoleLog to record the builds and the builds owner that are on the table
	(15 Minutes)

	- More Bug fixing with the findNextMove() function for finding builds to create, making sure it doesn't 
	use the same card as the hand card and the capture card for the build it's trying to create
	(30 Minutes)

	- Finished the ConsoleLog so that everything piece of information is recorded, also this function will be 
	used for writing the serialization file
	(15 Minutes)
TOTAL: 5.25 Hours